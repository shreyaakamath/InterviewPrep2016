/*
 * Tree Basics :
 * 1)Inorder Traversal(L N R)
 * 2)Preorder  Traversal(N L R)
 * 3)Postorder Traversal (L R N)
 * 
 * Prob:
 * 1)is tree balanced
 */
package cracking.the.coding.interview;

import java.util.List;
import java.util.PriorityQueue;

class TreeNode{
	int data;
	TreeNode left;
	TreeNode right;
	
	TreeNode(int data,TreeNode left,TreeNode right){
		this.data=data;
		this.left=left;
		this.right=right;
	}
}
public class TreeBasics {
	TreeNode root;
	
	void create(){
		root=new TreeNode(1,null,null);
		root.right = new TreeNode(3,null,null);
		root.left = new TreeNode(2,null,null);
	}
	
	void inorder(TreeNode n){
		if(n==null) return;
		inorder(n.left);
		System.out.println(n.data);
		inorder(n.right);
	}
	
	void preorder(TreeNode n){
		if(n==null) return;
		System.out.println(n.data);
		inorder(n.left);
		inorder(n.right);
	}
	
	void postorder(TreeNode n){
		if(n==null) return;
		inorder(n.left);
		inorder(n.right);
		System.out.println(n.data);
	}
	
	/*BST insert*/
	void insert(TreeNode n1,int val){
		if(n1==null){n1=new TreeNode(val,null,null);}
		if(val<=n1.data){
			if(n1.left==null){n1.left=new TreeNode(val,null,null);return;}
			insert(n1.left,val);
		}else{
			if(n1.right==null){n1.right=new TreeNode(val,null,null);return;}
			insert(n1.right,val);
		}
	}
	
	void balanced(){
		PriorityQueue<Integer> depth = new PriorityQueue<Integer>();
		recurBalanced(depth,root,0);
		
		
	}
	
	boolean isLeaf(TreeNode n1){
		if(n1.right==null && n1.left==null) return true;
		else return false;
	}
	
	void recurBalanced(PriorityQueue<Integer> depth, TreeNode n1,int val){
		if(isLeaf(n1)==true) {depth.add(val);return;}
		else {
			recurBalanced(depth,n1.right,val++);
			recurBalanced(depth,n1.left,val++);
		}
	}
	static void testOrdering(){
		TreeBasics t1= new TreeBasics();
		t1.create();
		t1.inorder(t1.root);
		System.out.println();
		t1.preorder(t1.root);
		System.out.println();
		t1.postorder(t1.root);
	}
	
	public static void main(String[] args) {
		TreeBasics t1= new TreeBasics();
		t1.create();
		t1.insert(t1.root,0);
		t1.inorder(t1.root);
	}

}
