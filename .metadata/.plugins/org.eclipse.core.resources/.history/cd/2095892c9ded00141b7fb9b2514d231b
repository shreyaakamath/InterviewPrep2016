package spoj.most.solved.probs;

import java.util.Scanner;

/**
 * http://www.spoj.com/problems/FCTRL/
 * @author shreyak
 *
 */
public class Factorial {
	
	
	static void trailingZerosEfficient(int n ){
	
		int totalFactors=0;
		int noFactors= n/((int)Math.pow(5, 1));
		int i=2;
		while(noFactors>0){
			totalFactors+=noFactors;
			noFactors= n/((int)Math.pow(5, i));
			i++;
		}
		
		System.out.println(totalFactors);
	}
	
	public static void main(String[] args) {

		Scanner scan = new Scanner(System.in);
		int test = scan.nextInt();
		int[]n = new int[test];
		for(int i=0;i<test;i++){
			n[i] = scan.nextInt();
		}
		
		for(int i=0;i<test;i++) trailingZerosEfficient(n[i]);
	}

	/*INEFFICIENT APPROACHES ATTEMTPED*/
	
	/*
	 * problem with this approach is that you are looking only at factors of 5. factors of 25 are ignored . in this approach for 25 we are attributing one zero but\
	 * 25*4 is 100 which has 2 zeros similarly for 50 for 125 etc . so need to find number of factors of 5,25,125,625 etc 
	 */
	static void getZeros(int n){
		int trailingZero=0;
		int trailingFive =0;
		
		for(int i=5;i<=n;i++){
			if(i%10==5) trailingFive++;
			if(i%10==0){
				trailingZero++;
				int num = i/10;
				while(num>0 && num%10==0) {trailingZero++;num/=10;}
			}
		}
		System.out.println(trailingFive+trailingZero);
	}
	
	/*
	 * brute force approach = over flow problem . cannot calculate factorial of large numbers efficiently . since we dont have to get the actual factorial why bother. 
	 */
	static void trailingZeroFactorial(int n){
		double factorial =n;
		for(int i =2;i<n;i++)
			factorial*=i;
		System.out.println("factorial of "+ n +"---"+factorial);
		int count=0;
		int lastDigit;
		while(factorial>0){
			lastDigit = (int)factorial%10;
			factorial/=10;
			if(lastDigit ==0) count++;
		}
		System.out.println(count);
	}
}

