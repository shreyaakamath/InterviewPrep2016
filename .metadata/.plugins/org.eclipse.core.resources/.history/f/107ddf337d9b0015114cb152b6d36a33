package binary.tree.operations;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

public class PreorderConstruct {
	
	//complexity : 
	static void construct(TreeNode root , List<Integer> inorder ,int start , int end, List<Integer> preorder){
		if(preorder.size()==0) return;
		if(root==null) return;
		//first element of preorder is a node val. fetch and delete 
		int node = preorder.get(0);
		preorder.remove(new Integer(node));
		root.val=node;
		
		int mid=0;
		boolean leafLeft=false;
		boolean leafRight=false;
		
		//find the node value in the inorder list. split left and right based on this.
		for(int i=start;i<end;i++)
			if(inorder.get(i)==node){mid=i;break;}
		
		//check if node has only leaves
		if(mid-start == 1){
			leafLeft=true;
			int left=inorder.get(mid-1);
			root.left=new TreeNode(left);
			preorder.remove(new Integer(left));
		}
		if(end-mid-1==1){
			leafRight=true;
			int right = inorder.get(mid+1);
			root.right=new TreeNode(right);
			preorder.remove(new Integer(right));
		}

		//if node has more than leaves than split and call again
		if(!leafLeft){ 
			root.left=new TreeNode();
			construct(root.left,inorder,start,mid,preorder);
		}
		if(!leafRight){
			root.right=new TreeNode();
			construct(root.right,inorder,mid+1,end,preorder);
		}
		
		return;
	}
	
	static void constructPreorder(TreeNode root,List<Integer> preorder,int preorderIndex,int start,int end){
		if(preorder.size()==0)return;
		if(root==null) return;
		
		int node = preorder.get(preorderIndex);
		preorderIndex=preorderIndex+1;
		//preorder.remove(new Integer(node));
		root.val=node;
		root.left=new TreeNode();
		root.right=new TreeNode();
		
		int mid=0;
		for(int i=start;i<end;i++){
			if(preorder.get(i) > node){mid=i; break;}
		}
		boolean leftFlag=false;boolean rightFlag=false;
		//left leaf
		if(mid-start ==2){
			preorderIndex=preorderIndex+1;
			leftFlag=true;
			root.left.val=preorder.get(mid-1);
		}
		//right leaf
		if(end-mid==1){
			preorderIndex=preorderIndex+1;
			rightFlag=true;
			root.right.val=preorder.get(mid);
		}
		
		if(!leftFlag){
			constructPreorder(root.left,preorder,preorderIndex,start+1,mid);
		}
		if(!rightFlag){
			constructPreorder(root.right,preorder,preorderIndex,mid,end);
		}
		
		 
	}
	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		List<Integer> preorder= new ArrayList<Integer>();
//		while(scan.hasNext()){
//			preorder.add(scan.nextInt());
//		}
		preorder.add(10);preorder.add(5);preorder.add(1);preorder.add(7);preorder.add(40);preorder.add(50);
		List<Integer> inorder = new ArrayList<Integer>(preorder);
		Collections.sort(inorder);
		TreeNode root=new TreeNode();
//		construct(root,inorder,0,inorder.size(),preorder);
		constructPreorder(root,preorder,0,0,preorder.size());
		CommonOperations.print(root);
//		System.out.println();
	}

}
