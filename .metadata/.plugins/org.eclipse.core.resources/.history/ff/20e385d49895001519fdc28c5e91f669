/*
 * Graph Basics :
 * 1)DFS
 * 2)BFS
 * 
 * Probs:
 * 1)is there route between two nodes
 */
package cracking.the.coding.interview;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;

class graphNode{
	int val;
	int len;
	
	graphNode(int val,int len){
		this.val=val;
		this.len=len;
	}
}

public class GraphBasics {
	List<graphNode>[] adj;
	int  n;
	int e;
	boolean visited[];
	int edgeTo[];
	
	GraphBasics(File file){
		Scanner scan =null;
		try{
			scan = new Scanner(file);
		}catch(FileNotFoundException err){
			System.err.println(err.getMessage());
		}
		if(scan.hasNext()){this.n=scan.nextInt();}
		if(scan.hasNext()){this.e=scan.nextInt();}
		visited = new boolean[n+1];
		edgeTo = new int[n+1];
		adj = (List<graphNode>[]) new ArrayList[n+1];
		
		for(int i=0;i<=n;i++){
			adj[i] = new ArrayList<graphNode>();
		}
		while(scan.hasNext()){
			int u=scan.nextInt();
			int v=scan.nextInt();
			int l=scan.nextInt();
			adj[u].add(new graphNode(v,l));
		}
	}
	
	void bfs(graphNode s){
		
		edgeTo[s.val] = s.val;
		LinkedList<graphNode> q = new LinkedList<graphNode>();
		q.addLast(s);
		visited[s.val] = true;
		while(!q.isEmpty()){
			graphNode tmp=q.removeFirst();
				for(graphNode ch:adj[tmp.val]){
					if(!visited[ch.val]){
						visited[ch.val]=true;
						q.addLast(ch);
						edgeTo[ch.val]=tmp.val;
					}
				}
		}
		for(int i=0;i<=n;i++){
			System.out.println(edgeTo[i]);
		}
	}
	
	
	void dfs(){
		visited[1]=true;
		edgeTo[1]=1;
		dfsRecur(new graphNode(1,2),visited,edgeTo);
		for(int i=0;i<=n;i++){
			System.out.println(edgeTo[i]);
		}
	}
	void dfsRecur(graphNode s,boolean visited[],int edgeTo[]){
		if(s==null) return;
		for(graphNode ch : adj[s.val]){
			if(!visited[ch.val]) {
			visited[ch.val] = true;
			edgeTo[ch.val] = s.val;
			dfsRecur(ch,visited,edgeTo);}
		}
	}
	
	void connected(){
		
	}
	public static void main(String[] args) {
		File file = new File("graph.txt");
		GraphBasics g1 = new GraphBasics(file);
		g1.bfs(new graphNode(1,2));
		System.out.println();
		g1.dfs();
		
	}

}
